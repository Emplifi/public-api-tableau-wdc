{"version":3,"sources":["aggregated-post-metrics.js","api.js","common.js","constants.js","login.js","posts.js","profile-metrics.js","profiles.js","tableau-connector.js"],"names":["$aggregatedPostMetrics","$","$missingProfileLabels","$aggregatedPostMetricsSpinner","hide","$dimensionsSelect","$aggregatedPostMetricsSelect","$aggregatedPostTimedimension","async","onAggregatedPostMetricsSubmit","e","preventDefault","show","SBKS","aggregated_post_metrics","aggregated_post_dimensions","item","serializeArray","name","push","value","unshift","date_range","parseDateRange","tableau","connectionData","JSON","stringify","invokeConnector","data_source","renderAggregatedPostMetrics","empty","metrics_available","selected_with_no_labels","network","profiles","Object","entries","profiles_selected","insights","find","v","metric","keys","AGGREGATED_POST_METRICS","indexOf","met","id","text","filter","profiles_with_no_labels","includes","each","this","outerWidth","css","width","select2","multiple","data","change","onMetricsChange","length","append","map","profile_name_by_id","join","dimensions","val","metric_dimensions","intersect","maximumSelectionLength","trigger","createHeaders","Content-Type","Authorization","btoa","username","password","x-api-consumer","callSbksApi","path","method","response","fetch","apiUrl","headers","body","json","doApiCall","sbksData","params","success","header","index","type","rows","label_id","label","profile_labels","l","post_labels","console","log","chunkArray","myArray","chunk_size","tempArray","arrayLength","slice","splitDateRange","start","end","days","day_end","moment","dates","Array","from","range","by","step","ranges","start_date","date","format","add","combineMerge","target","source","options","destination","cloneUnlessOtherwiseSpecified","isMergeableObject","deepmerge","a","b","Set","prototype","has","split","end_today","isSame","adjustDateRange","dateRange","diff","submit","window","extendMoment","daterangepicker","startDate","subtract","endDate","minDate","maxDate","alwaysShowCalendars","showDropdowns","Today","Yesterday","Last 7 Days","Last 30 Days","This Month","startOf","endOf","Last Month","This Year","Last Year","postsUrl","facebook","instagram","youtube","twitter","linkedin","pinterest","vkontakte","networks","icons","vk","profile_labels_selected","profile_metrics","profile_dimensions","posts_filters","posts_networks","PROFILE_COMMON_DIMENSIONS","PROFILE_METRICS","fans_change","fans_lifetime","insights_activity","concat","insights_activity_unique","insights_engaged_users","insights_fan_adds","insights_fan_adds_unique","insights_fan_removes","insights_fan_removes_unique","insights_fans_lifetime","insights_fans_online","insights_impressions","insights_negative_feedback","insights_positive_feedback","insights_post_clicks","insights_post_clicks_unique","insights_post_impressions","insights_post_reach","insights_reach","insights_reach_28_days","insights_reach_7_days","insights_reach_engagement","insights_reactions","insights_video_complete_views_30s","insights_video_complete_views_30s_repeat_views","insights_video_complete_views_30s_unique","insights_video_repeat_views","insights_video_views","insights_video_views_unique","insights_views","followers_change","followers_lifetime","following_change","following_lifetime","insights_followers","insights_impressions_28_days","insights_impressions_7_days","insights_profile_clicks","insights_profile_views","ff_ratio","listed_change","listed_lifetime","interaction_change","interactions_per_1k_fans","subscribers_change","subscribers_lifetime","video_lifetime","viewed_time_change","views_change","boards_change","boards_lifetime","pins_lifetime","common_agg_dimensions","insights_engagements","engagement_rate","interactions","likes","sentiment_manual_auto","shares","user_posts_responded","insights_reach_per_content","number_of_comments","page_posts","page_shares","user_posts","user_posts_average_response_time","user_posts_response_rate","user_questions_average_response_time","user_questions_responded","user_questions_response_rate","insights_completion_rate","insights_story_exits","insights_story_taps_back","insights_story_taps_forward","insights_media_views","page_replies","profile_tweets","ID_NAME_URL","dataTypeEnum","string","url","POSTS_SORT_FIELDS","comments","created_time","reactions","reactions_by_type.anger","reactions_by_type.haha","reactions_by_type.like","reactions_by_type.love","reactions_by_type.sorry","reactions_by_type.wow","insights_reach_by_post_attribution.organic","insights_reach_by_post_attribution.paid","insights_reach_engagement_rate","insights_video_view_time_average","insights_video_views_10s","insights_video_views_by_post_attribution.organic","insights_video_views_by_post_attribution.paid","insights_saves","insights_story_completion_rate","dislikes","duration","video_view_time","video_views","POSTS_FILTER_FIELDS","content_type","grade","media_type","origin","post_attribution","video_type","POSTS_FIELDS","attachments","array","subfields","title","description","image_url","author","channel","int","comments_sentiment","positive","neutral","negative","content","datetime","deleted","bool","hidden","float","page","status","profile","published","reactions_by_type","like","love","wow","haha","sorry","anger","sentiment","spam","universal_video_id","video","crosspost","crosspostable","live","shared","insights_engagement","insights_engagement_by_engagement_type","saves","insights_impressions_by_post_attribution","paid","organic","viral","insights_interactions","insights_interactions_by_interaction_type","comment","share","insights_negative_feedback_unique","insights_post_clicks_by_clicks_type","link_clicks","button_clicks","other_clicks","photo_views","video_plays","insights_reach_by_post_attribution","insights_reactions_by_type","insights_story_replies","insights_video_view_time","insights_video_view_time_by_distribution","owned","insights_video_view_time_by_post_attribution","insights_video_views_10s_by_play_type","autoplayed","click_to_play","insights_video_views_10s_by_post_attribution","insights_video_views_10s_by_sound","on","off","insights_video_views_10s_unique","insights_video_views_30s","insights_video_views_30s_by_play_type","insights_video_views_30s_by_post_attribution","insights_video_views_30s_unique","insights_video_views_average_completion","insights_video_views_by_play_type","insights_video_views_by_post_attribution","insights_video_views_by_sound","insights_video_views_complete","insights_video_views_complete_by_post_attribution","insights_video_views_complete_unique","insights_video_views_complete_unique_by_post_attribution","insights_video_views_distribution","insights_video_views_unique_by_post_attribution","$login","$loginSpinner","fetchProfilesAndLabels","requests","profile_labels_request","post_labels_request","Promise","all","values","coroutine","err","showModal","toString","errors","sort","localeCompare","profile_labels_response","selected_profiles","post_labels_response","isEmptyObject","onLoginSubmit","renderProfiles","html","bootstrap","Modal","document","getElementById","click","$posts","$postsSorts","$postsSpinner","processFormField","replace","onPostsSubmit","undefined","skip","renderPosts","$self","key","charAt","toUpperCase","selected","minimumResultsForSearch","$element","element","detach","field","config","$profileMetrics","$profileMetricsContent","$profileMetricsSpinner","onProfileMetricsSubmit","time_dimension","renderProfileMetrics","initProfileMetricsAndDimensions","self","dimension","d","$profiles","$profilesSpinner","$profilesTable","onProfilesSubmit","selectedProfiles","parts","platform","filterProfiles","search","hasProfiles","match","RegExp","attr","$tbody","renderProfile","picture","insights_enabled","keyup","prop","$checkbox","first","substring","parents","tbody","icon","MAX_PROFILES","MAX_METRICS","MAX_DAYS","MAX_POSTS_ARRAY_DEPTH","tableauConnector","makeConnector","dataSource","connectionName","init","initCallback","authType","authTypeEnum","custom","getSchema","schemaCallback","parse","cols","dataType","metrics","appendMetricColumn","appendDimensionColumn","items","fields","fieldObj","appendColumn","i","subField","alias","columns","getData","table","doneCallback","appendRows","getProfileData","getAggregatedPostData","getPostsData","registerConnector"],"mappings":"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","file":"all.js","sourcesContent":["let $aggregatedPostMetrics = $('#aggregatedPostMetrics')\nlet $missingProfileLabels = $('#missingProfileLabels')\nlet $aggregatedPostMetricsSpinner = $('#aggregatedPostMetricsSpinner').hide()\nlet $dimensionsSelect = $('#aggregated_post_dimensions')\nlet $aggregatedPostMetricsSelect = $('#aggregated_post_metrics')\nlet $aggregatedPostTimedimension = $('#aggregated_post_timedimension')\n\n$(function () {\n    $aggregatedPostMetrics.submit(onAggregatedPostMetricsSubmit)\n})\n\nasync function onAggregatedPostMetricsSubmit(e) {\n    e.preventDefault()\n    $aggregatedPostMetricsSpinner.show()\n\n    SBKS.aggregated_post_metrics = []\n    SBKS.aggregated_post_dimensions = []\n    for (const item of $aggregatedPostMetrics.serializeArray()) {\n        if (item.name === 'daterange') {\n            SBKS.date_range = parseDateRange(item.value)\n            continue\n        } else if (item.name === 'time') {\n            if (item.value) {\n                SBKS.aggregated_post_dimensions.unshift(item.value)\n            }\n            continue\n        }\n\n        SBKS[item.name] = SBKS[item.name] || []\n        SBKS[item.name].push(item.value)\n    }\n\n    tableau.connectionData = JSON.stringify(SBKS)\n\n    invokeConnector(SBKS.data_source)\n}\n\nfunction renderAggregatedPostMetrics() {\n    $aggregatedPostMetrics.show()\n    $missingProfileLabels.empty()\n    let metrics_available = []\n    let selected_with_no_labels = []\n    for (const [network, profiles] of Object.entries(SBKS.profiles_selected)) {\n        let insights = Object.entries(profiles).find(v => v[1] ? v : null)\n        for (const metric of Object.keys(AGGREGATED_POST_METRICS[network])) {\n            if (!insights && metric.indexOf('insights') === 0) {\n                continue\n            }\n            if(!metrics_available.find(met=>met.id === metric))\n                metrics_available.push({id: metric, text: metric})\n        }\n        selected_with_no_labels = [ ...selected_with_no_labels,\n            ...(Object.keys(profiles)\n            .filter(item => SBKS.profiles_with_no_labels[network].includes(item))\n        )]\n    }\n\n    // Fix the positioning bug with select2\n    $('select').each(function () {\n        if($(this).outerWidth() > 10) {\n            $(this).css({width: `${$(this).outerWidth() - 1}px`})\n        }\n    })\n\n    $aggregatedPostMetricsSelect.select2({\n        multiple: true,\n        data: metrics_available\n    }).change(onMetricsChange)\n\n    $aggregatedPostTimedimension.change(onMetricsChange)\n\n    if(selected_with_no_labels.length){\n        $missingProfileLabels.append($(`\n        <div class=\"alert alert-info\" role=\"alert\">\n            Some profiles you selected don't have profile labels. If you select profile_label as a dimension\n            the data for that profile will not be shown.<br>\n            Profiles: ${selected_with_no_labels\n                .map(id => SBKS.profile_name_by_id[id])\n                .join(\", \")\n            }\n        </div>\n        `))\n    }\n}\n\nfunction onMetricsChange() {\n    let dimensions = []\n\n    for (const metric of $aggregatedPostMetricsSelect.val()) {\n        for (const network of Object.keys(SBKS.profiles_selected)) {\n            let metric_dimensions = AGGREGATED_POST_METRICS[network][metric]\n            if (metric_dimensions) {\n                dimensions = !dimensions.length ? metric_dimensions : intersect(dimensions, metric_dimensions)\n            }\n        }\n    }\n\n    if ($aggregatedPostMetricsSelect.val().includes('sentiment_manual_auto')) {\n        $dimensionsSelect.val('sentiment')\n    }\n\n    let value = $dimensionsSelect.val()\n    $dimensionsSelect.empty().select2({\n        multiple: true,\n        data: dimensions.map(v => {\n            return {id: v, text: v}\n        }),\n        maximumSelectionLength: $aggregatedPostTimedimension.val() === '' ? 2 : 1\n    }).val(value).trigger('change')\n}\n","function createHeaders() {\n    return {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': `Basic ${btoa(`${tableau.username}:${tableau.password}`)}`,\n        'x-api-consumer': 'Tableau V3'\n    }\n}\n\nasync function callSbksApi(path, method, data) {\n    let response = await fetch(SBKS.apiUrl + path, {\n        method: method,\n        headers: createHeaders(),\n        body: data ? JSON.stringify(data) : null\n    })\n\n    return await response.json()\n}\n\n// Call the API and fetch the metrics\nasync function doApiCall(path, sbksData, params) {\n    let response = await callSbksApi(path, 'POST', params)\n\n    if (!response.success) {\n        console.log(\"API Request Failed\", response)\n        return\n    }\n\n    if (response.header) {\n        // Replace profile and post label IDs with names for metrics requests\n        for (const [index, header] of response.header.entries()) {\n            if (header.type === 'profile_label') {\n                response['header'][index]['rows'] = header.rows.map(label_id => {\n                    let label = sbksData.profile_labels.find(l => l.id === label_id)\n                    return label ? label.name : label_id\n                })\n            } else if (header.type === 'post_labels') {\n                response['header'][index]['rows'] = header.rows.map(label_id => {\n                    let label = sbksData.post_labels.find(l => l.id === label_id)\n                    return label ? label.name : label_id\n                })\n            }\n        }\n    }\n\n    return response\n}\n","// Chunk an array into chunks with maximum size of `chunk_size`\nfunction chunkArray(myArray, chunk_size) {\n    let index = 0\n    let tempArray = []\n    const arrayLength = myArray.length\n\n    for (index = 0; index < arrayLength; index += chunk_size) {\n        tempArray.push(myArray.slice(index, index + chunk_size))\n    }\n\n    return tempArray\n}\n\n// Split date range into batches in order to avoid API limits\nfunction splitDateRange(start, end, days) {\n    const day_end = moment(end)\n    let dates = Array.from(moment.range(moment(start), day_end).by('days', {step: days}))\n    dates.push(day_end)\n\n    let ranges = {}, start_date = null\n    for (const date of dates) {\n        if (!start_date) {\n            start_date = date\n            continue\n        }\n\n        ranges[start_date.format('YYYY-MM-DD')] = date.format('YYYY-MM-DD')\n        start_date = date.add(1, 'day')\n    }\n\n    return ranges\n}\n\n// Merge function used for combining metrics of two responses with same dimensions\nfunction combineMerge(target, source, options) {\n    let destination = target.slice()\n\n    for (const [index, item] of source.entries()) {\n        if (typeof destination[index] === 'undefined') {\n            destination[index] = options.cloneUnlessOtherwiseSpecified(item, options)\n        } else if (options.isMergeableObject(item)) {\n            destination[index] = deepmerge(target[index], item, options)\n        } else if (target.indexOf(item) === -1) {\n            destination.push(item)\n        }\n    }\n\n    return destination\n}\n\n// Intersection of two lists\nfunction intersect(a, b) {\n    return a.filter(Set.prototype.has, new Set(b))\n}\n\nfunction parseDateRange(value) {\n    let [start, end] = value.split(' - ')\n    start = moment(start, 'MM/DD/YYYY')\n    end = moment(end, 'MM/DD/YYYY')\n\n    return {\n        start: start.format('YYYY-MM-DD'),\n        end: end.format('YYYY-MM-DD'),\n        end_today: end.isSame(moment(), 'day')\n    }\n}\n\n// When current date was selected as end date, shift the range to end today\nfunction adjustDateRange(dateRange) {\n    let start = moment(dateRange.start, 'YYYY-MM-DD')\n    let end = moment(dateRange.end, 'YYYY-MM-DD')\n\n    if (dateRange.end_today) {\n        end = moment().format('YYYY-MM-DD')\n        start = start.add(moment().diff(end, 'days'), 'days').format('YYYY-MM-DD')\n    }\n\n    return {start: start, end: end}\n}\n\n$(function () {\n    window['moment-range'].extendMoment(moment)\n\n    $('input[name=daterange]').daterangepicker({\n        startDate: moment().subtract(29, 'days'),\n        endDate: moment(),\n        minDate: '01/01/2008',\n        maxDate: moment(),\n        alwaysShowCalendars: true,\n        showDropdowns: true,\n        ranges: {\n            'Today': [moment(), moment()],\n            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n            'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n            'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n            'This Month': [moment().startOf('month'), moment().endOf('month')],\n            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment()\n                .subtract(1, 'month').endOf('month')],\n            'This Year': [moment().startOf('year'), moment()],\n            'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year')\n                .endOf('year')]\n        }\n    })\n})\n","// SHARED CONFIG\nlet SBKS = {\n    apiUrl: 'https://api.socialbakers.com/',\n    postsUrl: {\n        facebook: '3/facebook/page/posts',\n        instagram: '3/instagram/profile/posts',\n        youtube: '3/youtube/profile/videos',\n        twitter: '3/twitter/profile/tweets',\n        linkedin: '3/linkedin/profile/posts',\n        pinterest: '3/pinterest/profile/posts',\n        vkontakte: '3/vkontakte/profile/posts'\n    },\n    data_source: 'profile',\n    networks: ['facebook', 'instagram', 'twitter', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n    icons: {\n        facebook: 'logo-facebook',\n        instagram: 'logo-instagram',\n        twitter: 'logo-twitter',\n        youtube: 'logo-youtube',\n        linkedin: 'logo-linkedin',\n        pinterest: 'logo-pinterest',\n        vk: 'logo-vk'\n    },\n    profiles: {},\n    profiles_selected: {},\n    profile_labels: [],\n    post_labels: [],\n    profile_labels_selected: [],\n    profile_metrics: {},\n    profile_dimensions: {},\n    profiles_with_no_labels: {},\n    profile_name_by_id: {},\n    aggregated_post_metrics: [],\n    aggregated_post_dimensions: [],\n    posts_filters: {},\n    posts_networks: {}\n}\n\n// PROFILES\nlet PROFILE_COMMON_DIMENSIONS = ['profile', 'profile_label']\nlet PROFILE_METRICS = {\n    facebook: {\n        'fans_change': PROFILE_COMMON_DIMENSIONS,\n        'fans_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'insights_activity': PROFILE_COMMON_DIMENSIONS.concat(['activity_type']),\n        'insights_activity_unique': PROFILE_COMMON_DIMENSIONS.concat(\n            ['activity_type', 'gender_age', 'city', 'country', 'locale']\n        ),\n        'insights_engaged_users': PROFILE_COMMON_DIMENSIONS,\n        'insights_fan_adds': PROFILE_COMMON_DIMENSIONS.concat(['like_source']),\n        'insights_fan_adds_unique': PROFILE_COMMON_DIMENSIONS.concat(['like_source']),\n        'insights_fan_removes': PROFILE_COMMON_DIMENSIONS,\n        'insights_fan_removes_unique': PROFILE_COMMON_DIMENSIONS.concat(['unlike_source']),\n        'insights_fans_lifetime': PROFILE_COMMON_DIMENSIONS.concat(['gender_age', 'city', 'country', 'locale']),\n        'insights_fans_online': PROFILE_COMMON_DIMENSIONS.concat(['hour_of_day']),\n        'insights_impressions': PROFILE_COMMON_DIMENSIONS.concat(['activity_type', 'post_attribution']),\n        'insights_negative_feedback': PROFILE_COMMON_DIMENSIONS,\n        'insights_positive_feedback': PROFILE_COMMON_DIMENSIONS.concat(['positive_feedback_type']),\n        'insights_post_clicks': PROFILE_COMMON_DIMENSIONS.concat(['click_type']),\n        'insights_post_clicks_unique': PROFILE_COMMON_DIMENSIONS.concat(['click_type']),\n        'insights_post_impressions': PROFILE_COMMON_DIMENSIONS.concat(['post_attribution']),\n        'insights_post_reach': PROFILE_COMMON_DIMENSIONS.concat(['post_attribution', 'frequency_distribution']),\n        'insights_reach': PROFILE_COMMON_DIMENSIONS.concat(['gender_age', 'post_attribution']),\n        'insights_reach_28_days': PROFILE_COMMON_DIMENSIONS.concat(['gender_age']),\n        'insights_reach_7_days': PROFILE_COMMON_DIMENSIONS.concat(['gender_age']),\n        'insights_reach_engagement': PROFILE_COMMON_DIMENSIONS,\n        'insights_reactions': PROFILE_COMMON_DIMENSIONS.concat(['reaction_type']),\n        'insights_video_complete_views_30s': PROFILE_COMMON_DIMENSIONS.concat(['play_type', 'post_attribution']),\n        'insights_video_complete_views_30s_repeat_views': PROFILE_COMMON_DIMENSIONS,\n        'insights_video_complete_views_30s_unique': PROFILE_COMMON_DIMENSIONS,\n        'insights_video_repeat_views': PROFILE_COMMON_DIMENSIONS,\n        'insights_video_views': PROFILE_COMMON_DIMENSIONS.concat(['play_type', 'post_attribution']),\n        'insights_video_views_unique': PROFILE_COMMON_DIMENSIONS,\n        'insights_views': PROFILE_COMMON_DIMENSIONS\n    },\n    instagram: {\n        'followers_change': PROFILE_COMMON_DIMENSIONS,\n        'followers_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'following_change': PROFILE_COMMON_DIMENSIONS,\n        'following_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'insights_followers': PROFILE_COMMON_DIMENSIONS.concat(['country', 'locale', 'city', 'gender_age']),\n        'insights_impressions': PROFILE_COMMON_DIMENSIONS,\n        'insights_impressions_28_days': PROFILE_COMMON_DIMENSIONS,\n        'insights_impressions_7_days': PROFILE_COMMON_DIMENSIONS,\n        'insights_profile_clicks': PROFILE_COMMON_DIMENSIONS.concat(['click_target']),\n        'insights_profile_views': PROFILE_COMMON_DIMENSIONS,\n        'insights_reach': PROFILE_COMMON_DIMENSIONS,\n        'insights_reach_28_days': PROFILE_COMMON_DIMENSIONS,\n        'insights_reach_7_days': PROFILE_COMMON_DIMENSIONS\n    },\n    twitter: {\n        'ff_ratio': PROFILE_COMMON_DIMENSIONS,\n        'followers_change': PROFILE_COMMON_DIMENSIONS,\n        'followers_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'following_change': PROFILE_COMMON_DIMENSIONS,\n        'following_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'listed_change': PROFILE_COMMON_DIMENSIONS,\n        'listed_lifetime': PROFILE_COMMON_DIMENSIONS\n    },\n    youtube: {\n        'interaction_change': PROFILE_COMMON_DIMENSIONS.concat(['interaction_type']),\n        'interactions_per_1k_fans': PROFILE_COMMON_DIMENSIONS,\n        'subscribers_change': PROFILE_COMMON_DIMENSIONS,\n        'subscribers_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'video_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'viewed_time_change': PROFILE_COMMON_DIMENSIONS,\n        'views_change': PROFILE_COMMON_DIMENSIONS\n    },\n    linkedin: {\n        'followers_change': PROFILE_COMMON_DIMENSIONS,\n        'followers_lifetime': PROFILE_COMMON_DIMENSIONS\n    },\n    pinterest: {\n        'boards_change': PROFILE_COMMON_DIMENSIONS,\n        'boards_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'followers_change': PROFILE_COMMON_DIMENSIONS,\n        'followers_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'following_change': PROFILE_COMMON_DIMENSIONS,\n        'following_lifetime': PROFILE_COMMON_DIMENSIONS,\n        'pins_lifetime': PROFILE_COMMON_DIMENSIONS\n    }\n}\n\n// AGGREGATED POST\nlet common_agg_dimensions = ['platform', 'profile', 'post_labels', 'profile_label']\nlet insights_engagements = common_agg_dimensions.concat(['media_type', 'content_type'])\nlet engagement_rate = insights_engagements.concat(['published_status', 'sentiment_type'])\nlet insights_video_views = common_agg_dimensions.concat(['content_type', 'published_status', 'sentiment_type'])\nlet interactions = engagement_rate.concat(['interaction_type'])\nlet likes = common_agg_dimensions.concat(['media_type', 'sentiment_type'])\nlet sentiment_manual_auto = common_agg_dimensions.concat(['media_type', 'sentiment'])\nlet shares = insights_engagements.concat(['published_status'])\nlet user_posts_responded = insights_engagements.concat(['response_time'])\n\nlet AGGREGATED_POST_METRICS = {\n    facebook: {\n        'engagement_rate': engagement_rate,\n        'insights_engagements': insights_engagements,\n        'insights_impressions': engagement_rate,\n        'insights_post_clicks': common_agg_dimensions.concat(['content_type', 'media_type', 'published_status']),\n        'insights_reach_engagement': common_agg_dimensions.concat(['content_type', 'media_type', 'published_status']),\n        'insights_reach_per_content': engagement_rate,\n        'insights_video_views': insights_video_views,\n        'interactions': interactions,\n        'interactions_per_1k_fans': engagement_rate,\n        'likes': likes,\n        'number_of_comments': engagement_rate,\n        'page_posts': engagement_rate,\n        'page_shares': common_agg_dimensions,\n        'sentiment_manual_auto': sentiment_manual_auto,\n        'shares': shares,\n        'user_posts': insights_engagements,\n        'user_posts_average_response_time': insights_engagements,\n        'user_posts_responded': user_posts_responded,\n        'user_posts_response_rate': insights_engagements,\n        'user_questions_average_response_time': insights_engagements,\n        'user_questions_responded': user_posts_responded,\n        'user_questions_response_rate': engagement_rate\n    },\n    instagram: {\n        'engagement_rate': engagement_rate,\n        'insights_completion_rate': common_agg_dimensions.concat(['media_type']),\n        'insights_engagements': insights_engagements,\n        'insights_impressions': engagement_rate,\n        'insights_reach_per_content': engagement_rate,\n        'insights_story_exits': common_agg_dimensions.concat(['media_type']),\n        'insights_story_taps_back': common_agg_dimensions.concat(['media_type']),\n        'insights_story_taps_forward': common_agg_dimensions.concat(['media_type']),\n        'insights_video_views': insights_video_views,\n        'interactions': interactions,\n        'interactions_per_1k_fans': engagement_rate,\n        'likes': likes,\n        'number_of_comments': engagement_rate,\n        'page_posts': engagement_rate,\n        'sentiment_manual_auto': sentiment_manual_auto\n    },\n    twitter: {\n        'engagement_rate': engagement_rate,\n        'insights_engagements': insights_engagements,\n        'insights_impressions': engagement_rate,\n        'insights_media_views': common_agg_dimensions.concat(['content_type', 'media_type', 'sentiment_type']),\n        'insights_video_views': insights_video_views,\n        'interactions': interactions,\n        'interactions_per_1k_fans': engagement_rate,\n        'likes': likes,\n        'number_of_comments': engagement_rate,\n        'page_posts': engagement_rate,\n        'page_replies': common_agg_dimensions,\n        'page_shares': common_agg_dimensions,\n        'profile_tweets': common_agg_dimensions.concat(['media_type']),\n        'sentiment_manual_auto': sentiment_manual_auto,\n        'shares': shares,\n        'user_posts': insights_engagements,\n        'user_posts_average_response_time': insights_engagements,\n        'user_posts_responded': user_posts_responded,\n        'user_posts_response_rate': insights_engagements,\n        'user_questions_average_response_time': insights_engagements,\n        'user_questions_responded': user_posts_responded,\n        'user_questions_response_rate': engagement_rate\n    },\n    youtube: {\n        'engagement_rate': engagement_rate,\n        'insights_video_views': insights_video_views,\n        'interactions': interactions,\n        'interactions_per_1k_fans': engagement_rate,\n        'likes': likes,\n        'number_of_comments': engagement_rate,\n        'page_posts': engagement_rate\n    },\n    linkedin: {\n        'engagement_rate': engagement_rate,\n        'interactions': interactions,\n        'interactions_per_1k_fans': engagement_rate,\n        'number_of_comments': engagement_rate,\n        'page_posts': engagement_rate,\n        'sentiment_manual_auto': sentiment_manual_auto\n    },\n    pinterest: {\n        'interactions': interactions,\n        'number_of_comments': engagement_rate,\n        'page_posts': engagement_rate,\n        'page_shares': common_agg_dimensions,\n        'shares': shares\n    },\n    vkontakte: {\n        'engagement_rate': engagement_rate,\n        'interactions': interactions,\n        'interactions_per_1k_fans': engagement_rate,\n        'number_of_comments': engagement_rate,\n        'page_posts': engagement_rate,\n        'shares': shares\n    }\n}\n\n// POSTS\nlet ID_NAME_URL = {\n    id: tableau.dataTypeEnum.string,\n    name: tableau.dataTypeEnum.string,\n    url: tableau.dataTypeEnum.string\n}\n\nlet POSTS_SORT_FIELDS = {\n    'comments': ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n    'created_time': ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n    'interactions': ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n    'interactions_per_1k_fans': ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n    'reactions': ['facebook', 'linkedin'],\n    'reactions_by_type.anger': ['facebook'],\n    'reactions_by_type.haha': ['facebook'],\n    'reactions_by_type.like': ['facebook'],\n    'reactions_by_type.love': ['facebook'],\n    'reactions_by_type.sorry': ['facebook'],\n    'reactions_by_type.wow': ['facebook'],\n    'shares': ['facebook', 'pinterest', 'vkontakte'],\n    'insights_engaged_users': ['facebook'],\n    'insights_post_clicks': ['facebook'],\n    'insights_reach_by_post_attribution.organic': ['facebook'],\n    'insights_reach_by_post_attribution.paid': ['facebook'],\n    'insights_reach_engagement_rate': ['facebook'],\n    'insights_video_view_time_average': ['facebook'],\n    'insights_video_views_10s': ['facebook'],\n    'insights_video_views_by_post_attribution.organic': ['facebook'],\n    'insights_video_views_by_post_attribution.paid': ['facebook'],\n    'likes': ['instagram', 'youtube', 'vkontakte'],\n    'insights_impressions': ['instagram'],\n    'insights_reach': ['instagram'],\n    'insights_saves': ['instagram'],\n    'insights_story_completion_rate': ['instagram'],\n    'insights_story_exits': ['instagram'],\n    'insights_story_taps_back': ['instagram'],\n    'insights_story_taps_forward': ['instagram'],\n    'insights_video_views': ['instagram'],\n    'dislikes': ['youtube'],\n    'duration': ['youtube'],\n    'video_view_time': ['youtube'],\n    'video_views': ['youtube']\n}\n\nlet POSTS_FILTER_FIELDS = {\n    content_type: {\n        facebook: ['post', 'shared'],\n        instagram: ['post', 'story'],\n        twitter: ['post', 'shared', 'reply'],\n        youtube: [],\n        linkedin: [],\n        pinterest: ['post', 'shared'],\n        vkontakte: ['status', 'photo', 'video', 'link', 'note', 'poll', 'album']\n    },\n    grade: {\n        facebook: ['A+', 'A', 'B', 'C', 'D'],\n        instagram: ['A+', 'A', 'B', 'C', 'D'],\n        youtube: [],\n        twitter: [],\n        linkedin: [],\n        pinterest: [],\n        vkontakte: []\n    },\n    media_type: {\n        facebook: ['status', 'link', 'video', 'note', 'poll', 'offer', 'photo', 'carousel'],\n        instagram: ['video', 'photo', 'carousel'],\n        youtube: ['video'],\n        twitter: ['status', 'link', 'video', 'photo', 'animated_gif'],\n        linkedin: [],\n        pinterest: [],\n        vkontakte: []\n    },\n    origin: {\n        facebook: ['User-Generated Content', 'Brand\\'s Content'],\n        instagram: [],\n        youtube: [],\n        twitter: ['User-Generated Content', 'Brand\\'s Content'],\n        linkedin: [],\n        pinterest: [],\n        vkontakte: ['User-Generated Content', 'Brand\\'s Content']\n    },\n    post_attribution: {\n        facebook: ['organic', 'paid'],\n        instagram: ['organic', 'paid'],\n        youtube: [],\n        twitter: [],\n        linkedin: [],\n        pinterest: [],\n        vkontakte: []\n    },\n    video_type: {\n        facebook: ['crosspost', 'crosspostable', 'live', 'shared'],\n        instagram: [],\n        youtube: [],\n        twitter: [],\n        linkedin: [],\n        pinterest: [],\n        vkontakte: []\n    },\n    post_labels: { // From API\n        facebook: [],\n        instagram: [],\n        youtube: [],\n        twitter: [],\n        linkedin: [],\n        pinterest: [],\n        vkontakte: []\n    }\n}\n\nlet POSTS_FIELDS = {\n    attachments: {\n        networks: ['facebook', 'instagram', 'linkedin', 'pinterest', 'vkontakte'],\n        array: true,\n        subfields: {\n            title: tableau.dataTypeEnum.string,\n            description: tableau.dataTypeEnum.string,\n            type: tableau.dataTypeEnum.string,\n            url: tableau.dataTypeEnum.string,\n            image_url: tableau.dataTypeEnum.string\n        }\n    },\n    author: {\n        networks: ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n        subfields: ID_NAME_URL\n    },\n    channel: {networks: ['youtube'], subfields: ID_NAME_URL},\n    comments: {\n        networks: ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.int\n    },\n    comments_sentiment: {\n        networks: ['facebook'],\n        subfields: {\n            positive: tableau.dataTypeEnum.int,\n            neutral: tableau.dataTypeEnum.int,\n            negative: tableau.dataTypeEnum.int\n        }\n    },\n    content: {networks: ['facebook', 'linkedin', 'pinterest', 'vkontakte'], type: tableau.dataTypeEnum.string},\n    content_type: {\n        networks: ['facebook', 'instagram', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.string\n    },\n    created_time: {\n        networks: ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.datetime\n    },\n    deleted: {networks: ['facebook'], type: tableau.dataTypeEnum.bool},\n    description: {networks: ['youtube'], type: tableau.dataTypeEnum.string},\n    dislikes: {networks: ['youtube'], type: tableau.dataTypeEnum.int},\n    duration: {networks: ['youtube'], type: tableau.dataTypeEnum.int},\n    grade: {networks: ['facebook', 'instagram'], type: tableau.dataTypeEnum.string},\n    hidden: {networks: ['facebook'], type: tableau.dataTypeEnum.bool},\n    id: {\n        networks: ['facebook', 'instagram', 'youtube', 'twitter', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.string\n    },\n    interactions: {\n        networks: ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.int\n    },\n    interactions_per_1k_fans: {\n        networks: ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.float\n    },\n    likes: {networks: ['instagram', 'youtube', 'vkontakte'], type: tableau.dataTypeEnum.int},\n    media_type: {\n        networks: ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.string\n    },\n    origin: {networks: ['facebook', 'twitter', 'vkontakte'], type: tableau.dataTypeEnum.string},\n    page: {networks: ['facebook', 'instagram', 'linkedin', 'vkontakte'], subfields: ID_NAME_URL},\n    post_attribution: {\n        networks: ['facebook', 'instagram'],\n        subfields: {\n            status: tableau.dataTypeEnum.string,\n            type: tableau.dataTypeEnum.string\n        }\n    },\n    post_labels: {\n        networks: ['facebook', 'instagram', 'youtube', 'twitter', 'linkedin', 'pinterest', 'vkontakte'],\n        array: true,\n        subfields: {\n            id: tableau.dataTypeEnum.string,\n            name: tableau.dataTypeEnum.string\n        }\n    },\n    profile: {networks: ['twitter', 'pinterest'], subfields: ID_NAME_URL},\n    published: {networks: ['facebook'], type: tableau.dataTypeEnum.bool},\n    reactions: {networks: ['facebook', 'linkedin'], type: tableau.dataTypeEnum.int},\n    reactions_by_type: {\n        networks: ['facebook'],\n        subfields: {\n            like: tableau.dataTypeEnum.int,\n            love: tableau.dataTypeEnum.int,\n            wow: tableau.dataTypeEnum.int,\n            haha: tableau.dataTypeEnum.int,\n            sorry: tableau.dataTypeEnum.int,\n            anger: tableau.dataTypeEnum.int\n        }\n    },\n    sentiment: {networks: ['facebook', 'instagram'], type: tableau.dataTypeEnum.string},\n    shares: {networks: ['facebook', 'pinterest', 'vkontakte'], type: tableau.dataTypeEnum.int},\n    spam: {networks: ['facebook'], type: tableau.dataTypeEnum.bool},\n    universal_video_id: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    url: {\n        networks: ['facebook', 'instagram', 'youtube', 'linkedin', 'pinterest', 'vkontakte'],\n        type: tableau.dataTypeEnum.string\n    },\n    video: {\n        networks: ['facebook'],\n        subfields: {\n            id: tableau.dataTypeEnum.string,\n            length: tableau.dataTypeEnum.int,\n            crosspost: tableau.dataTypeEnum.bool,\n            crosspostable: tableau.dataTypeEnum.bool,\n            live: tableau.dataTypeEnum.bool,\n            shared: tableau.dataTypeEnum.bool\n        }\n    },\n    video_view_time: {networks: ['youtube'], type: tableau.dataTypeEnum.int},\n    video_views: {networks: ['youtube'], type: tableau.dataTypeEnum.int},\n    insights_engaged_users: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_engagement: {networks: ['instagram'], type: tableau.dataTypeEnum.int},\n    insights_engagement_by_engagement_type: {\n        networks: ['instagram'],\n        subfields: {\n            comments: tableau.dataTypeEnum.int,\n            likes: tableau.dataTypeEnum.int,\n            saves: tableau.dataTypeEnum.int\n        }\n    },\n    insights_impressions: {networks: ['facebook', 'instagram'], type: tableau.dataTypeEnum.int},\n    insights_impressions_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            paid: tableau.dataTypeEnum.int,\n            organic: tableau.dataTypeEnum.int,\n            viral: tableau.dataTypeEnum.int\n        }\n    },\n    insights_interactions: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_interactions_by_interaction_type: {\n        networks: ['facebook'],\n        subfields: {\n            comment: tableau.dataTypeEnum.int,\n            like: tableau.dataTypeEnum.int,\n            share: tableau.dataTypeEnum.int\n        }\n    },\n    insights_negative_feedback_unique: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_post_clicks: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_post_clicks_by_clicks_type: {\n        networks: ['facebook'],\n        subfields: {\n            link_clicks: tableau.dataTypeEnum.int,\n            button_clicks: tableau.dataTypeEnum.int,\n            other_clicks: tableau.dataTypeEnum.int,\n            photo_views: tableau.dataTypeEnum.int,\n            video_plays: tableau.dataTypeEnum.int\n        }\n    },\n    insights_post_clicks_unique: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_reach: {networks: ['facebook', 'instagram'], type: tableau.dataTypeEnum.int},\n    insights_reach_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            paid: tableau.dataTypeEnum.int,\n            organic: tableau.dataTypeEnum.int,\n            viral: tableau.dataTypeEnum.int\n        }\n    },\n    insights_reach_engagement_rate: {networks: ['facebook'], type: tableau.dataTypeEnum.float},\n    insights_reactions: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_reactions_by_type: {\n        networks: ['facebook'],\n        subfields: {\n            like: tableau.dataTypeEnum.int,\n            love: tableau.dataTypeEnum.int,\n            wow: tableau.dataTypeEnum.int,\n            haha: tableau.dataTypeEnum.int,\n            sorry: tableau.dataTypeEnum.int,\n            anger: tableau.dataTypeEnum.int\n        }\n    },\n    insights_saves: {networks: ['instagram'], type: tableau.dataTypeEnum.int},\n    insights_story_completion_rate: {networks: ['instagram'], type: tableau.dataTypeEnum.float},\n    insights_story_exits: {networks: ['instagram'], type: tableau.dataTypeEnum.int},\n    insights_story_replies: {networks: ['instagram'], type: tableau.dataTypeEnum.int},\n    insights_story_taps_back: {networks: ['instagram'], type: tableau.dataTypeEnum.int},\n    insights_story_taps_forward: {networks: ['instagram'], type: tableau.dataTypeEnum.int},\n    insights_video_view_time: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_view_time_average: {networks: ['facebook'], type: tableau.dataTypeEnum.float},\n    insights_video_view_time_by_distribution: {\n        networks: ['facebook'],\n        subfields: {\n            owned: tableau.dataTypeEnum.int,\n            shared: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_view_time_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            organic: tableau.dataTypeEnum.int,\n            paid: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views: {networks: ['facebook', 'instagram'], type: tableau.dataTypeEnum.int},\n    insights_video_views_10s: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_views_10s_by_play_type: {\n        networks: ['facebook'],\n        subfields: {\n            autoplayed: tableau.dataTypeEnum.int,\n            click_to_play: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_10s_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            organic: tableau.dataTypeEnum.int,\n            paid: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_10s_by_sound: {\n        networks: ['facebook'],\n        subfields: {\n            on: tableau.dataTypeEnum.int,\n            off: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_10s_unique: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_views_30s: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_views_30s_by_play_type: {\n        networks: ['facebook'],\n        subfields: {\n            autoplayed: tableau.dataTypeEnum.int,\n            click_to_play: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_30s_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            organic: tableau.dataTypeEnum.int,\n            paid: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_30s_unique: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_views_average_completion: {networks: ['facebook'], type: tableau.dataTypeEnum.float},\n    insights_video_views_by_play_type: {\n        networks: ['facebook'],\n        subfields: {\n            autoplayed: tableau.dataTypeEnum.int,\n            click_to_play: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            organic: tableau.dataTypeEnum.int,\n            paid: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_by_sound: {\n        networks: ['facebook'],\n        subfields: {\n            on: tableau.dataTypeEnum.int,\n            off: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_complete: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_views_complete_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            organic: tableau.dataTypeEnum.int,\n            paid: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_complete_unique: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_views_complete_unique_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            organic: tableau.dataTypeEnum.int,\n            paid: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_distribution: {\n        networks: ['facebook'],\n        subfields: {\n            owned: tableau.dataTypeEnum.int,\n            shared: tableau.dataTypeEnum.int\n        }\n    },\n    insights_video_views_unique: {networks: ['facebook'], type: tableau.dataTypeEnum.int},\n    insights_video_views_unique_by_post_attribution: {\n        networks: ['facebook'],\n        subfields: {\n            organic: tableau.dataTypeEnum.int,\n            paid: tableau.dataTypeEnum.int\n        }\n    }\n}\n","let $login = $('#login')\nlet $loginSpinner = $('#loginSpinner').hide()\n\nasync function fetchProfilesAndLabels() {\n    SBKS.profiles = {}\n\n    let requests = {}\n    for (const network of SBKS.networks) {\n        requests[network] = callSbksApi(`3/${network}/profiles`, 'GET')\n    }\n\n    let profile_labels_request = callSbksApi('3/profile/labels', 'GET')\n    let post_labels_request = callSbksApi('3/post/labels', 'GET')\n    await Promise.all(Object.values(requests))\n    for (const [network, coroutine] of Object.entries(requests)) {\n        let response = {success: false}\n        try {\n            response = await coroutine\n        } catch (err) {\n            showModal('Profiles API error', err.toString())\n            return\n        }\n\n        if (!response.success) {\n            showModal(\n                'API authorization failed',\n                `API connection failed.<br><br><code>${JSON.stringify(response.errors)}</code>`\n            )\n            return\n        }\n        if (response.profiles.length) {\n            response.profiles.sort((a, b) => {\n                return a.name.localeCompare(b.name)\n            })\n\n            SBKS.profiles[network] = response.profiles\n\n            for(const profile of SBKS.profiles[network])\n                SBKS.profile_name_by_id[profile.id] = profile.name\n\n            SBKS.profiles_with_no_labels[network] = SBKS.profiles[network]\n                .filter(profile => !profile.profile_labels.length)\n                .map(profile => profile.id)\n        }\n    }\n\n    try {\n        let profile_labels_response = await profile_labels_request\n        if (profile_labels_response.success) {\n            profile_labels_response.data.sort((a, b) => {\n                return a.name.localeCompare(b.name)\n            })\n            for (const label of profile_labels_response.data) {\n                label.selected_profiles = []\n            }\n            SBKS.profile_labels = profile_labels_response.data\n        }\n        let post_labels_response = await post_labels_request\n        if (post_labels_response.success) {\n            post_labels_response.data.sort((a, b) => {\n                return a.name.localeCompare(b.name)\n            })\n            SBKS.post_labels = post_labels_response.data\n        }\n    } catch (err) {\n        showModal('Labels API error', err.toString())\n    }\n\n    if ($.isEmptyObject(SBKS.profiles)) {\n        showModal('Profiles not available', 'Your account doesn\\'t have any profiles connected.')\n        return\n    }\n}\n\nasync function onLoginSubmit(e) {\n    e.preventDefault()\n    $loginSpinner.show()\n\n    tableau.username = $('#token').val()\n    tableau.password = $('#secret').val()\n\n    await fetchProfilesAndLabels()\n\n    $loginSpinner.hide()\n    $login.hide()\n    renderProfiles()\n}\n\nfunction showModal(title, body) {\n    $('#modalTitle').text(title)\n    $('#modalBody').html(body)\n    let modal = new bootstrap.Modal(document.getElementById('modal'))\n    modal.show()\n}\n\n$(function () {\n    $login.submit(onLoginSubmit)\n\n    $('#profiles .back').click(function () {\n        $('[id$=Spinner]').hide()\n        $('#profiles').hide()\n        $('#login').show()\n    })\n\n    $('#profileMetrics .back,#aggregatedPostMetrics .back, #posts .back').click(function () {\n        $('[id$=Spinner]').hide()\n        $('#profileMetrics, #aggregatedPostMetrics, #posts').hide()\n        $('#profiles').show()\n    })\n})\n","let $posts = $('#posts')\nlet $postsSorts = $('#postsSorts')\nlet $postsSpinner = $('#postsSpinner').hide()\n\n$(function () {\n    $posts.submit(onPostsSubmit)\n})\n\nfunction processFormField(data, item) {\n    data = data || {}\n    if (item.name.indexOf('[]') !== -1) {\n        let name = item.name.replace('[]', '')\n        data[name] = data[name] || []\n        data[name].push(item.value)\n    } else {\n        data[item.name] = item.value\n    }\n\n    return data\n}\n\nasync function onPostsSubmit(e) {\n    e.preventDefault()\n    $postsSpinner.show()\n\n    let posts_filters = {}, posts_networks = {}\n    for (const item of $posts.serializeArray()) {\n        if (['', undefined, null].includes(item.value)) {\n            continue\n        }\n\n        if (item.name === 'daterange') {\n            SBKS.date_range = parseDateRange(item.value)\n            continue\n        }\n\n        let skip = false\n        for (const network of SBKS.networks) {\n            if (item.name.indexOf(network) === 0) {\n                item.name = item.name.replace(`${network}-`, '')\n                posts_networks[network] = processFormField(posts_networks[network], item)\n                skip = true\n                break\n            }\n        }\n\n        if (skip) {\n            continue\n        }\n\n        posts_filters = processFormField(posts_filters, item)\n    }\n\n    SBKS.posts_filters = posts_filters\n    SBKS.posts_networks = posts_networks\n\n    tableau.connectionData = JSON.stringify(SBKS)\n\n    invokeConnector(SBKS.data_source)\n}\n\nfunction renderPosts() {\n    $postsSorts.html('')\n    for (const network of Object.keys(SBKS.profiles_selected)) {\n        $postsSorts.append($(`\n            <div class=\"capitalize\" style=\"padding: 8px 0 12px 0; margin-left: -5px\">\n                <ion-icon style=\"vertical-align: sub; font-size: 22px;\" \n                    title=\"${network}\" name=\"${SBKS.icons[network]}\"></ion-icon> \n                ${network}\n            </div>\n            <div class=\"input-group mb-3\">\n                <label class=\"input-group-text\">Fields</label>\n                <select class=\"form-select\" data-fields=\"${network}\" name=\"${network}-fields[]\"></select>          \n            </div>\n            <div class=\"input-group mb-3\" style=\"${network === 'twitter' ? 'display:none' : ''}\">\n                <label class=\"input-group-text\">Sort</label>\n                <select class=\"form-select\" data-sort=\"${network}\" name=\"${network}-sort[]\" multiple></select>\n            </div>\n            <div class=\"row\">\n                <div class=\"col\">\n                    <div class=\"input-group mb-3\" style=\"${network === 'twitter' ? 'display:none' : ''}\">\n                        <label class=\"input-group-text\">Order</label>\n                        <select class=\"form-select\" name=\"${network}-order\">\n                            <option value=\"asc\">Ascending</option>\n                            <option value=\"desc\" selected>Descending</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col\">\n                    <div class=\"input-group mb-3\">\n                        <label class=\"input-group-text\">Limit</label>\n                        <input type=\"number\" min=\"1\" max=\"100\" value=\"100\" class=\"form-control\" name=\"${network}-limit\">\n                    </div>\n                </div>\n            </div>\n        `))\n    }\n\n    $posts.show()\n\n    // Fix the positioning bug with select2\n    $('select').each(function () {\n        if($(this).outerWidth() > 10) {\n            $(this).css({width: `${$(this).outerWidth() - 1}px`})\n        }\n    })\n\n    $('select[data-sort]').each(function () {\n        let $self = $(this)\n        let network = $self.data('sort')\n\n        let data = Object.keys(POSTS_SORT_FIELDS).map((key, index) => {\n            if (!POSTS_SORT_FIELDS[key].includes(network)) {\n                return undefined\n            }\n\n            let text = key.replace(/_/g, ' ').replace('.', ': ')\n            return {id: key, text: text.charAt(0).toUpperCase() + text.slice(1), selected: key === 'created_time'}\n        })\n\n        $self.select2({\n            multiple: true,\n            minimumResultsForSearch: -1,\n            data: data\n        }).on('select2:select', function (e) {\n            let $element = $(e.params.data.element)\n            $element.detach()\n            $(this).append($element)\n            $(this).trigger('change')\n        })\n    })\n\n    $('#post_labels').select2({\n        multiple: true,\n        data: SBKS.post_labels.map(label => {\n            return {id: label.id, text: label.name}\n        })\n    })\n\n    $('select[data-fields]').each(function () {\n        let $self = $(this)\n        let network = $self.data('fields')\n        let insights = Object.entries(SBKS.profiles_selected[network]).find(v => v[1] ? v : null)\n\n        let data = []\n        for (const [field, config] of Object.entries(POSTS_FIELDS)) {\n            if (insights && field.indexOf('insights') === 0) {\n                continue\n            }\n            if (config.networks.includes(network)) {\n                let text = field.replace(/_/g, ' ')\n                data.push({id: field, text: text.charAt(0).toUpperCase() + text.slice(1)})\n            }\n        }\n\n        $self.select2({multiple: true, data: data}).val(['page','profile','channel']).change()\n    })\n\n    $('select.form-select[multiple]').select2()\n}\n","let $profileMetrics = $('#profileMetrics')\nlet $profileMetricsContent = $('#profileMetricsContent')\nlet $profileMetricsSpinner = $('#profileMetricsSpinner').hide()\n\n$(function () {\n    $profileMetrics.submit(onProfileMetricsSubmit)\n})\n\nasync function onProfileMetricsSubmit(e) {\n    e.preventDefault()\n    $profileMetricsSpinner.show()\n\n    SBKS.profile_metrics = {}\n    SBKS.profile_dimensions = {}\n    let time_dimension = null\n    for (const item of $profileMetrics.serializeArray()) {\n        if (item.name === 'daterange') {\n            SBKS.date_range = parseDateRange(item.value)\n            continue\n        } else if (item.name === 'time') {\n            if (item.value) {\n                time_dimension = item.value\n            }\n            continue\n        }\n\n        let [network, type] = item.name.split('-')\n\n        SBKS.profile_dimensions[network] = SBKS.profile_dimensions[network] || []\n        SBKS.profile_metrics[network] = SBKS.profile_metrics[network] || []\n\n        if (time_dimension && !SBKS.profile_dimensions[network].includes(time_dimension)) {\n            SBKS.profile_dimensions[network].unshift(time_dimension)\n        }\n\n        SBKS[type][network].push(item.value)\n    }\n\n    tableau.connectionData = JSON.stringify(SBKS)\n\n    invokeConnector(SBKS.data_source)\n}\n\nfunction renderProfileMetrics() {\n    $profileMetricsContent.html('')\n    let selected_with_no_labels = []\n    for (const network of Object.keys(SBKS.profiles_selected)) {\n\n        selected_with_no_labels = [ ...selected_with_no_labels,\n            ...(Object.keys(SBKS.profiles_selected[network])\n            .filter(item => SBKS.profiles_with_no_labels[network].includes(item))\n        )]\n\n        $profileMetricsContent.append($(`\n            <div class=\"capitalize\" style=\"padding: 8px 0 12px 0; margin-left: -5px\">\n                <ion-icon style=\"vertical-align: sub; font-size: 22px;\" \n                    title=\"${network}\" name=\"${SBKS.icons[network]}\"></ion-icon> \n                ${network}\n            </div>\n            \n            <div class=\"input-group mb-3\">\n                <label class=\"input-group-text\">Metrics</label>\n                <select class=\"form-select\" data-network=\"${network}\" data-type=\"profile_metrics\" \n                        name=\"${network}-profile_metrics\"></select>\n            </div>\n            <div class=\"input-group mb-3\">\n                <label class=\"input-group-text\">Dimensions</label>\n                <select class=\"form-select\" data-network=\"${network}\" data-type=\"profile_dimensions\" \n                        name=\"${network}-profile_dimensions\"></select>\n            </div>\n        `))\n    }\n    if(selected_with_no_labels.length){\n        $profileMetricsContent.append($(`\n        <div class=\"alert alert-info\" role=\"alert\">\n            Some profiles you selected don't have profile labels. If you select profile_label as a dimension\n            the data for that profile will not be shown.<br>\n            Profiles: ${selected_with_no_labels\n                .map(id => SBKS.profile_name_by_id[id])\n                .join(\", \")\n            }\n        </div>\n        `))\n    }\n    $profileMetrics.show()\n    initProfileMetricsAndDimensions()\n}\n\nfunction initProfileMetricsAndDimensions() {\n    // Fix the positioning bug with select2\n    $('select').each(function () {\n        if($(this).outerWidth() > 10) {\n            $(this).css({width: `${$(this).outerWidth() - 1}px`})\n        }\n    })\n\n    $('select[data-type=profile_metrics]').each(function () {\n        let self = $(this)\n        let network = self.data('network')\n        let insights = Object.entries(SBKS.profiles_selected[network]).find(v => v[1] ? v : null)\n\n        self.empty().select2({\n            multiple: true,\n            data: Object.keys(PROFILE_METRICS[network]).map(v => {\n                if (!insights && v.indexOf('insights') === 0) {\n                    return undefined\n                }\n                return {id: v, text: v}\n            })\n        })\n    }).change(function () {\n        let self = $(this)\n        let dimensions = []\n        let network = self.data('network')\n\n        for (const metric of self.val()) {\n            dimensions = !dimensions.length\n                ? PROFILE_METRICS[network][metric]\n                : intersect(dimensions, PROFILE_METRICS[network][metric])\n        }\n\n        let $dimensionsSelect = $(`select[data-type=profile_dimensions][data-network=${network}]`)\n        let value = $dimensionsSelect.val()\n        $dimensionsSelect.empty().select2({\n            multiple: true,\n            data: dimensions.map(v => {\n                return {id: v, text: v}\n            })\n        }).val(value && value.length ? value : ['profile']).trigger('change')\n    }).trigger('change')\n\n    // Allow up to 1 custom dimension and ensure it's the last one selected\n    $(document).on('select2:select', 'select[data-type=dimensions]', function (e) {\n        let dimension = e.params.data.id\n        if (PROFILE_COMMON_DIMENSIONS.includes(dimension)) {\n            return\n        }\n\n        let self = $(this)\n        let selected = self.val().filter(d => PROFILE_COMMON_DIMENSIONS.includes(d))\n        selected.push(dimension)\n        self.val(selected).trigger('change')\n    })\n}\n","let $profiles = $('#profiles')\nlet $profilesSpinner = $('#profilesSpinner').hide()\nlet $profilesTable = $('#profilesTable')\n\nasync function onProfilesSubmit(e) {\n    e.preventDefault()\n    $profilesSpinner.show()\n    let selectedProfiles = $profiles.serializeArray()\n    for (const selected of selectedProfiles) {\n        let parts = selected.name.split('_')\n        let network = parts[0]\n\n        if (parts[1] === 'profile') {\n            SBKS.profiles_selected[network] = SBKS.profiles_selected[network] || {}\n            SBKS.profiles_selected[network][selected.value] = false\n        }\n    }\n\n    for (const selected of selectedProfiles) {\n        let parts = selected.name.split('_')\n        let network = parts[0]\n\n        if (parts[1] === 'insights') {\n            SBKS.profiles_selected[network] = SBKS.profiles_selected[network] || {}\n            SBKS.profiles_selected[network][selected.value] = true\n        }\n    }\n\n    for (const label of SBKS.profile_labels) {\n        for (const profile of label.profiles) {\n            if (!(profile.platform in SBKS.profiles_selected)) {\n                continue\n            }\n\n            if (profile.id in SBKS.profiles_selected[profile.platform]) {\n                label.selected_profiles.push(profile)\n            }\n        }\n    }\n\n    $profiles.hide()\n    if (SBKS.data_source === 'profile') {\n        renderProfileMetrics()\n    } else if (SBKS.data_source === 'aggregated_post') {\n        renderAggregatedPostMetrics()\n    } else if (SBKS.data_source === 'posts') {\n        renderPosts()\n    }\n}\n\n$(function () {\n    $profiles.submit(onProfilesSubmit)\n\n    $('[data-source-type]').click(function (e) {\n        e.preventDefault()\n        SBKS.data_source = $(this).data('source-type')\n        $('#data_source').text($(this).text())\n        renderProfiles()\n        $('#search').keyup()\n    })\n\n    $(document).on('change', '[data-select-multiple]', function () {\n        let self = $(this)\n        $(`tr[data-hidden=0] input[name=${self.data('select-multiple')}]`).each(function () {\n            $(this).prop('checked', self.prop('checked')).change()\n        })\n    })\n\n    $(document).on('change', 'input[type=checkbox][name$=_profile]', function () {\n        $('#profiles button[type=submit]')\n            .prop('disabled', !$('input[type=checkbox][name$=_profile]:checked').length)\n    })\n\n    $(document).on('click', '#profiles tbody tr', function (e) {\n        if (e.target.type !== 'checkbox') {\n            let $checkbox = $(this).find(':checkbox').first()\n            $checkbox.prop('checked', !$checkbox.prop('checked')).change()\n        }\n    })\n\n    $(document).on('keyup', '#search', function () {\n        filterProfiles($(this).val())\n\n        if (!$('tr[data-hidden=0]').length) {\n            let self = $(this)\n            let value = self.val()\n            self.val(value.substring(0, value.length - 1)).keyup()\n        }\n    })\n\n    $(document).on('click', 'th.toggleTbody', function () {\n        let self = $(this)\n        let network = self.parents('thead').data('network')\n        let tbody = $(`tbody[data-network=${network}]`)\n        let icon = self.find('ion-icon')\n\n        if (icon.attr('name') === 'caret-up-outline') {\n            tbody.css('display', 'none')\n            icon.attr('name', 'caret-down-outline')\n        } else {\n            tbody.css('display', '')\n            icon.attr('name', 'caret-up-outline')\n        }\n    })\n\n    $('#clearSearch').click(function () {\n        $('#search').val('').keyup()\n    })\n})\n\nfunction filterProfiles(search) {\n    for (const [network, profiles] of Object.entries(SBKS.profiles)) {\n        if (!profiles || !profiles.length) {\n            return\n        }\n\n        let hasProfiles = false\n        for (const profile of profiles) {\n            let show = !search || profile.name.match(new RegExp('(' + search + ')', 'gi'))\n            hasProfiles = hasProfiles || show\n            $(`tr[data-profile-id='${profile.id}']`)\n                .css('display', show ? '' : 'none')\n                .attr('data-hidden', show ? '0' : '1')\n        }\n\n        $(`thead[data-network=${network}]`)\n            .css('display', hasProfiles ? '' : 'none')\n            .attr('data-hidden', hasProfiles ? '0' : '1')\n    }\n}\n\nfunction renderProfiles() {\n    $profilesTable.html('')\n\n    for (const [network, profiles] of Object.entries(SBKS.profiles)) {\n        if (!profiles || !profiles.length || (SBKS.data_source === 'profile' && network === 'vkontakte')) {\n            continue\n        }\n\n        $profilesTable.append($(`\n            <thead data-network=\"${network}\">\n                <tr>\n                    <th style=\"width: 30px\" title=\"Select all\">\n                        <input class=\"form-check-input\" type=\"checkbox\" data-select-multiple=\"${network}_profile\" />\n                    </th>\n                    <th>\n                        <ion-icon style=\"vertical-align: sub;font-size: 22px;\"\n                            title=\"${network}\" name=\"${SBKS.icons[network]}\"></ion-icon> ${network}</th>\n                    <th>ID</th>\n                    <th>Insights</th>\n                    <th class=\"toggleTbody\" title=\"Toggle\"><ion-icon name=\"caret-up-outline\"></ion-icon></th>\n                </tr>\n            </thead>`)\n        )\n        let $tbody = $(`<tbody data-network=\"${network}\">`)\n        for (const profile of profiles) {\n            renderProfile(network, profile, $tbody)\n        }\n        $profilesTable.append($tbody)\n    }\n\n    $profiles.show()\n}\n\nfunction renderProfile(network, profile, $tbody) {\n    $tbody.append(\n        $(`<tr data-profile-id=\"${profile.id}\" data-hidden=\"0\">\n               <td><input class=\"form-check-input\" type=\"checkbox\" name=\"${network}_profile\" value=\"${profile.id}\"></td>\n               <td><img src=\"${profile.picture}\" alt=\"${profile.name}\"/> ${profile.name}</td>\n               <td>${profile.id}</td>\n               <td colspan=\"2\">\n                   <input class=\"form-check-input\" style=\"display: ${profile.insights_enabled ? 'block' : 'none'}\" \n                          type=\"checkbox\" name=\"${network}_insights\" value=\"${profile.id}\">\n               </td>\n           </tr>`)\n    )\n}\n","const MAX_PROFILES = 100\nconst MAX_METRICS = 25\nconst MAX_DAYS = 360\nconst MAX_POSTS_ARRAY_DEPTH = 10\nlet tableauConnector = tableau.makeConnector()\n\n// Initialize Tableau Web Data Connector\ntableauConnector.init = initCallback => {\n    tableau.authType = tableau.authTypeEnum.custom\n    initCallback()\n}\n\n// Define the schema\ntableauConnector.getSchema = schemaCallback => {\n    let sbksData = JSON.parse(tableau.connectionData)\n    let cols = []\n    if (sbksData.data_source === 'profile') {\n        cols.push({id: 'platform', dataType: tableau.dataTypeEnum.string})\n        for (const [network, metrics] of Object.entries(sbksData.profile_metrics)) {\n            for (const metric of metrics || []) {\n                cols = appendMetricColumn(metric, cols)\n            }\n\n            for (const dimension of sbksData.profile_dimensions[network] || []) {\n                cols = appendDimensionColumn(dimension, cols, sbksData)\n            }\n        }\n    } else if (sbksData.data_source === 'aggregated_post') {\n        for (const metric of sbksData.aggregated_post_metrics || []) {\n            cols = appendMetricColumn(metric, cols)\n        }\n\n        for (const dimension of sbksData.aggregated_post_dimensions || []) {\n            cols = appendDimensionColumn(dimension, cols, sbksData)\n        }\n    } else if (sbksData.data_source === 'posts') {\n        for (const items of Object.values(sbksData.posts_networks)) {\n            for (const field of items.fields || []) {\n                let fieldObj = POSTS_FIELDS[field]\n                if (fieldObj.type) {\n                    cols = appendColumn(cols, field, fieldObj.type)\n                } else if (fieldObj.array && fieldObj.subfields) {\n                    for (let i = 1; i < MAX_POSTS_ARRAY_DEPTH; i++) {\n                        for (const [subField, type] of Object.entries(fieldObj.subfields)) {\n                            cols = appendColumn(cols, `${field}_${subField}_${i}`, type)\n                        }\n                    }\n                } else if (fieldObj.subfields) {\n                    for (const [subField, type] of Object.entries(fieldObj.subfields)) {\n                        cols = appendColumn(cols, `${field}_${subField}`, type)\n                    }\n                }\n            }\n        }\n    }\n\n    if (cols.length) {\n        schemaCallback([{id: sbksData.data_source, alias: sbksData.data_source, columns: cols}])\n    }\n}\n\n// Download the data respecting API limits\ntableauConnector.getData = async (table, doneCallback) => {\n    let sbksData = JSON.parse(tableau.connectionData)\n\n    if (sbksData.data_source === 'profile') {\n        table.appendRows(await getProfileData(sbksData))\n    } else if (sbksData.data_source === 'aggregated_post') {\n        table.appendRows(await getAggregatedPostData(sbksData))\n    } else if (sbksData.data_source === 'posts') {\n        table.appendRows(await getPostsData(sbksData))\n    }\n\n    doneCallback()\n}\n\ntableau.registerConnector(tableauConnector)\n\nfunction invokeConnector(dataSource) {\n    if (dataSource === 'profile') {\n        tableau.connectionName = 'Socialbakers social media profiles'\n    } else if (dataSource === 'aggregated_post') {\n        tableau.connectionName = 'Socialbakers social media aggregated post metrics'\n    } else if (dataSource === 'posts') {\n        tableau.connectionName = 'Socialbakers social media posts'\n    }\n\n    tableau.submit()\n}\n\n"]}